[["Map",1,2,9,10,23,24,80,81,142,143,186,187],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.2","content-config-digest","6cbba14609b0bbbf","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"mermaid\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"github-light\",\"dark\":\"catppuccin-frappe\"},\"wrap\":false,\"transformers\":[{\"name\":\"@shikijs/transformers:notation-diff\"},{\"name\":\"@shikijs/transformers:notation-highlight\"},{\"name\":\"@shikijs/transformers:notation-highlight-word\"},{\"name\":\"@shikijs/transformers:notation-focus\"},{\"name\":\"@shikijs/transformers:notation-error-level\"},{\"name\":\"@shikijs/transformers:meta-highlight\"}]},\"remarkPlugins\":[null,null],\"rehypePlugins\":[null,[null,{\"customClassNames\":{\"calloutClass\":\"callout\",\"calloutTitleClass\":\"callout-title\",\"calloutContentClass\":\"callout-content\"}}],null,null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"welcome",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"deferredRender":22},{"title":14,"description":15,"permalink":11,"authors":16,"publishedAt":18},"Discover Explainer","Discover Explainer is a tool that helps you create beautiful, responsive, and accessible web documentation using Astro. It's built with Astro, Tailwind CSS, and TypeScript.",[17],"leadcode_dev","2024-01-01:23:00:00","# Welcome to Explainer\n\nExplainer is a documentation boilerplate designed to help you create beautiful, responsive, and accessible web documentation using [Astro](https://astro.build). This project combines the power of Astro with [Tailwind CSS](https://tailwindcss.com) and [TypeScript](https://www.typescriptlang.org) to provide a smooth development experience.\n\n## Why Explainer?\n\nDocumentation is often overlooked, but it's essential for the adoption and effective use of your project.\nExplainer fills an important gap in the technical documentation ecosystem. While Vue has robust solutions like Vitepress, the React ecosystem suffers from a lack of alternatives that don't depend on Next.js. Most documentation frameworks for React are closely tied to Next.js, which can be limiting for many projects.\n\nThis is where Astro, and by extension Explainer, particularly shines. Astro offers remarkable flexibility by allowing you to integrate any technological component related to your business. You can easily incorporate React, Vue, Svelte components, or even standard web elements according to your specific needs.\n\nThis agnostic approach allows you to create documentation that perfectly aligns with your existing technology stack, without forcing you to adopt a particular ecosystem. Whether you work with React, Vue, or other frameworks, Explainer adapts to your needs rather than the other way around.","src/content/blog/welcome.mdx","f5b3166b4e8226c4",true,"guide",["Map",25,26,35,36,44,45,53,54,62,63,71,72],"commands",{"id":25,"data":27,"body":32,"filePath":33,"digest":34,"deferredRender":22},{"title":28,"description":29,"permalink":25,"order":30,"icon":31},"Commands","Lorem ipsum dolor sit amet, consectetur adipiscing elit.",5,"lucide:square-slash","# Events","src/content/docs/guide/commands.mdx","cd48d09fc2241dd4","environment-variables",{"id":35,"data":37,"body":41,"filePath":42,"digest":43,"deferredRender":22},{"title":38,"description":29,"permalink":35,"order":39,"icon":40},"Environment variables",3,"lucide:key-round","# Environment variables","src/content/docs/guide/environment-variables.mdx","923e3a55a15e7b05","deployment",{"id":44,"data":46,"body":50,"filePath":51,"digest":52,"deferredRender":22},{"title":47,"description":29,"permalink":44,"order":48,"icon":49},"Deployment",6,"lucide:rocket","# Deployment","src/content/docs/guide/deployment.mdx","f3aa799d54ee08d9","event",{"id":53,"data":55,"body":32,"filePath":60,"digest":61,"deferredRender":22},{"title":56,"description":29,"permalink":57,"order":58,"icon":59},"Events","events",4,"lucide:bell","src/content/docs/guide/event.mdx","a10422a19267033e","structure",{"id":62,"data":64,"body":68,"filePath":69,"digest":70,"deferredRender":22},{"title":65,"description":29,"permalink":62,"order":66,"icon":67},"Structure",2,"lucide:folder-tree","# Structure\n\nThe folder structure of a project is very important.\nIt helps you to organize your project in a better way. It also helps you to understand the project structure easily.\n\nIn this guide, we will discuss the folder structure of a project.\n\n---\n\n## Minimal structure\n\nThe minimal structure proposed by the project consists of a simple source folder containing your business code.\nThe `bin` folder is used to use the `hmr` component in your application during the development phase; you can change the name of the `source` folder, but we do not recommend deleting it.\n\n```\n├── bin\n│  └── main.dart\n│\n├── lib\n│  ├── events\n│  └── commands\n│\n├── pubspec.yaml\n└── .env\n```\n\nThis architecture is classic in the world of Discord bots. It's simple yet meets the need for rapid implementation.\n\nOne of the limitations arises when your application grows more or less drastically: you'll end up with a multitude of files at the same level, which can lead to poor understanding of your application.\n\n---\n\n## N-tier structure\n\nWhen you're developing increasingly complex applications, you generally lose readability and maintainability\nand maintainability if you don't focus on a stable, future-proof software architecture.\n\n> [!note]\n> We recommend the following structure.\n\nOne approach we recommend is the module-based architecture.\nThis involves dividing your application into several business modules that are independent of each other.\n\n```\n├── assets\n│  ├── image1.png\n│  └── image2.png\n│\n├── bin\n│  └── main.dart\n│\n├── lib\n│  ├── commons\n│  │  ├── helper.dart\n│  │  └── api.dart\n│  │\n│  ├── first_module\n│  │  ├── events\n│  │  ├── commands\n│  │  └── provider.dart\n│  │\n│  └── second_module\n│     ├── events\n│     ├── commands\n│     └── provider.dart\n│\n├── pubspec.yaml\n└── .env\n```\n\nThis architecture has several notable advantages: it allows you to:\n- divide your application code into modules, each representing a business fragment\n- simplifies the integration of your code across multiple projects thanks to [`providers`](/docs/api/providers)\n\nIn this architecture, we use [`providers`](/docs/api/providers) allowing us to \"move\" the entry point of our module in order to facilitate the segmentation of our code.\n\nTo simplify the management of your modules, we recommend that you create a `provider.dart` file within each which will\nserve as the entry point for each module.\n\n:::code-group labels=[main.dart, module/provider.dart]\n```dart\nfinal client = Client()\n  .registerProvider(Provider.new) // [!code ++]\n  .build();\n```\n\n```dart\nfinal class Provider extends Provider {\n  final MineralClientContract _client;\n\n  Provider(this._client) {\n    _client.register(MyEvent.new); // [!code ++]\n    _client.registerCommand(MyCommand.new); // [!code ++]\n  }\n}\n```\n:::\n\n---\n\n## Layered architecture\n\nWhen we talk about modular architecture, we quickly come to hexagonal architecture.\nThis architecture allows you to decouple the different parts of your application according to their core business and\nresponsibility within it.\n\n> [!note]\n> We recommend the following structure.\n\n```\n├── bin\n│  └── main.dart\n│\n├── lib\n│  ├── ui\n│  │  ├── events\n│  │  │  ├── ready_event.dart\n│  │  │  └── message_create_event.dart\n│  │  │\n│  │  └── commands\n│  │     └── foo_command.dart\n│  │\n│  ├── services\n│  │  └── foo_service.dart\n│  │\n│  ├── data\n│  │  ├── models\n│  │  └── repositories\n│  │\n│  └── provider.dart\n│\n├── pubspec.yaml\n└── .env\n```\n\nThe above structure is an example that we recommend to help you adopt a modular, scalable and maintainable architecture by decoupling the different parts of your application as much as possible.\nHowever, it will not always suit your business needs and will need to be adapted accordingly.\n\n| Directory | Description |\n|----------|-------------|\n| `ui` | Contains the various parts of your application which are related to your business, including `events` and `commands`. |\n| `services` | Contains the services which allow you to manipulate the data in your application; they will generally be used from the `ui`. |\n| `data` | Contains the DTOs and repositories that allow you to manipulate the data in your application. An example of use is the use of a remote REST service to which you need to make HTTP calls. |\n| `provider` | The entry point of your module who's call under the `main` file. |\n\n---\n\n## Hexagonal architecture\n\nWhen we talk about modular architecture, we quickly come to hexagonal architecture.\nThis architecture allows you to decouple the different parts of your application according to their core business and\nresponsibility within it.\n\n> [!note]\n> We recommend the following structure.\n\n```\n├── bin\n│  └── main.dart\n│\n├── lib\n│  └── application\n│  │  └── tickets\n│  │     ├── commands\n│  │     ├── events\n│  │     └── ticket_provider.dart\n│  │\n│  ├── domain\n│  │  └── tickets\n│  │     ├── entities\n│  │     ├── repositories\n│  │     ├── dtos\n│  │     └── contracts\n│  │\n│  └── infrastructure\n│     └── tickets\n│        ├── repositories\n│        └── dtos\n│   \n├── pubspec.yaml\n└── .env\n```\n\nThis architecture has several notable advantages: it allows you to:\n- divide your application code into modules, each representing a business fragment\n- simplifies the integration of your code across multiple projects thanks to [`providers`](/docs/api/providers)\n- isolate the business logic of your application from the infrastructure layer\n\nThe `application` directory contains all of our business context divided into modules, allowing better readability and maintainability of our code.\n\n| Directory | Description |\n|----------|-------------|\n| `bin` | Contains the entry point of your application. |\n| `application` | Contains the various parts of your application which are related to your business, including `events`, `commands`, `states` or any mineral component, it can be split into modules. |\n| `domain` | Contains the entities, DTOs, repositories, contracts that allow you to manipulate the data in your application. He contains the business logic of your application and must not depend on anything other than itself. |\n| `infrastructure` | Contains implementations that must interact with external services such as APIs, BDDs and queues. Each implementation must implement a contract defined in the domain. |\n\n> [!note]\n> You can find a sample implementation of this architecture [here](https://github.com/LeadcodeDev/mineral_beta_bot_demo).","src/content/docs/guide/structure.mdx","b64b48dd7bb0d01e","installation",{"id":71,"data":73,"body":77,"filePath":78,"digest":79,"deferredRender":22},{"title":74,"description":29,"permalink":71,"order":75,"icon":76},"Installation",1,"lucide:play","# Installation\n\nBefore embarking on this crazy discord adventure, you will need to follow the steps outlined below to set up a clean and healthy project.\n\n---\n\n## Prerequisites\nPlease make sure you have the following tools installed on your machine before you start.\n\n### Dart lang\nThe Mineral framework has been developed entirely in the Dart programming language, so you will need to install it in your development environment first. In order to best install it, please refer to the [official documentation](https://dart.dev/get-dart).\n\n> [!note]\n> The version of the Dart language sdk must be at least `^3.5.2`.\n\n---\n\n## Setup new project\n\n### From the CLI\n\nYou can use the Mineral CLI to create a new project.\n\nFollow the steps below to install the CLI.\n\n:::code-group auto\n```bash\ndart pub global activate mineral_cli [version]\n\ncd path/to/your/projects\nmineral create my_project\n```\n:::\n\n> [!note]\n> More details about the CLI can be found in the [`command line`](/docs/api/cli) section.\n\n---\n\n### From scratch\n\nUse the following command to start a new blank Dart project.\n```bash\ndart create my_project\n```\n\nAfter creating the project, you will need to add the Mineral framework to your `pubspec.yaml` file.\n\n:::code-group labels=[pubspec.yaml]\n```yaml\ndependencies:\n  mineral: ^4.0.0-dev.11\n  mineral_cache: ^1.0.0-dev.4\n```\n:::\n\n> [!note]\n> Please verify the lasted version of the [`core`](https://pub.dev/packages/mineral) and [`cache`](https://pub.dev/packages/mineral_cache) packages directly on registry.\n\nThen run the following command to install the dependencies.\n\n:::code-group auto\n```bash\ndart pub get\n```\n:::\n\nMake sure you have the following minimal structure in your project.\nThe `.env` file is not created by default when you start a new Dart project, don't forget to create it.\n\n:::code-group labels=[boilerplate, .env]\n```\n├── bin\n│  └── main.dart\n│\n├── pubspec.yaml\n└── .env\n```\n```dotenv\nDART_ENV=development\nTOKEN=your_discord_token\nDISCORD_REST_API_VERSION=12\nDISCORD_WS_VERSION=12\nINTENT=3276799\nLOG_LEVEL=info\n```\n:::\n\n### Application\n\nThe `main.dart` file is the entry point of your application. This is where you will start your bot.\n\n:::code-group labels=[main.dart]\n```dart\nvoid main(_, port) async {\n  final client = ClientBuilder()\n    .setHmrDevPort(port)\n    .build();\n\n  await client.init();\n}\n```\n:::\n\nTo check that your application is working properly, we recommend that you use the `ready` event.\n\n:::code-group labels=[main.dart]\n```dart\nvoid main(_, port) async {\n  final client = ClientBuilder()\n    .setHmrDevPort(port)\n    .build();\n\n  client.events.ready((Bot bot) { // [!code ++]\n    client.logger.info('${bot.username} is ready ! 🚀'); // [!code ++]\n  }); // [!code ++]\n\n  await client.init();\n}\n```\n:::\n\n## Running the application\n\nFinally, you can run your application with the following command.\n\n:::code-group auto\n```bash\ndart run src/main.dart\n```\n:::","src/content/docs/guide/installation.mdx","d98cf3907ed09ff8","api",["Map",82,83,90,91,25,98,35,102,53,106,110,111,118,119,125,126,134,135],"cli",{"id":82,"data":84,"body":87,"filePath":88,"digest":89,"deferredRender":22},{"title":85,"description":29,"permalink":82,"order":58,"icon":86},"Command Line Interface","lucide:terminal","# Command Line Interface","src/content/docs/api/cli.mdx","b3f9d81e4bbc5319","components",{"id":90,"data":92,"body":95,"filePath":96,"digest":97,"deferredRender":22},{"title":93,"description":29,"permalink":90,"order":58,"icon":94},"Components","lucide:layout-dashboard","# Components","src/content/docs/api/components.mdx","5d30078fbac63544",{"id":25,"data":99,"body":32,"filePath":100,"digest":101,"deferredRender":22},{"title":28,"description":29,"permalink":25,"order":39,"icon":31},"src/content/docs/api/commands.mdx","48fdb2a30ac547dc",{"id":35,"data":103,"body":41,"filePath":104,"digest":105,"deferredRender":22},{"title":38,"description":29,"permalink":35,"order":75,"icon":40},"src/content/docs/api/environment-variables.mdx","a6a802c7523095f4",{"id":53,"data":107,"body":32,"filePath":108,"digest":109,"deferredRender":22},{"title":56,"description":29,"permalink":57,"order":66,"icon":59},"src/content/docs/api/event.mdx","084a5b1dae0ee378","interactive-components",{"id":110,"data":112,"body":115,"filePath":116,"digest":117,"deferredRender":22},{"title":113,"description":29,"permalink":110,"order":30,"icon":114},"Interactive Components","lucide:mouse-pointer-2","# Interactive Components","src/content/docs/api/interactive-components.mdx","f5074ca845ff9800","global-states",{"id":118,"data":120,"body":32,"filePath":123,"digest":124,"deferredRender":22},{"title":121,"description":29,"permalink":118,"order":48,"icon":122},"Global States","lucide:brain","src/content/docs/api/global-states.mdx","d87723dff539a66f","placeholders",{"id":125,"data":127,"body":131,"filePath":132,"digest":133,"deferredRender":22},{"title":128,"description":29,"permalink":125,"order":129,"icon":130},"Placeholders",7,"lucide:hash","# Placeholders","src/content/docs/api/placeholders.mdx","333761a65eb152fa","providers",{"id":134,"data":136,"body":139,"filePath":140,"digest":141,"deferredRender":22},{"title":137,"description":29,"permalink":134,"order":39,"icon":138},"Providers","lucide:picture-in-picture","# Providers","src/content/docs/api/providers.mdx","469eabfec877e4e2","concepts",["Map",144,145,152,153,160,161,169,170,178,179],"container",{"id":144,"data":146,"body":32,"filePath":150,"digest":151,"deferredRender":22},{"title":147,"description":148,"permalink":144,"order":66,"icon":149},"Service container","Service container is a container that holds the services for the application.","lucide:box","src/content/docs/concepts/container.mdx","bd8ff53c89c81ebb","datastore",{"id":152,"data":154,"body":32,"filePath":158,"digest":159,"deferredRender":22},{"title":155,"description":156,"permalink":152,"order":58,"icon":157},"Datastore","Data store is a concept that allows you to store the data for the application.","lucide:satellite-dish","src/content/docs/concepts/datastore.mdx","eee7e9cd9d945a7f","data-caching",{"id":160,"data":162,"body":166,"filePath":167,"digest":168,"deferredRender":22},{"title":163,"description":164,"permalink":160,"order":39,"icon":165},"Data caching","Data caching is a mechanism that caches the data for the application.","lucide:database","# Data caching","src/content/docs/concepts/data-caching.mdx","cedb3fc7f644d075","immutability",{"id":169,"data":171,"body":175,"filePath":176,"digest":177,"deferredRender":22},{"title":172,"description":173,"permalink":169,"order":75,"icon":174},"Immutability","Immutability is a concept that ensures the data is not modified after it is created.","lucide:lock","# Immutability","src/content/docs/concepts/immutability.mdx","2ea686d22a97aa55","hmr",{"id":178,"data":180,"body":32,"filePath":184,"digest":185,"deferredRender":22},{"title":181,"description":182,"permalink":178,"order":66,"icon":183},"Hot Module Replacement","Hot Module Replacement is a feature that allows you to replace a module without reloading the page.","lucide:zap","src/content/docs/concepts/hmr.mdx","f6fe7ce0fe6abf47","examples",["Map",188,189],"ping-pong",{"id":188,"data":190,"body":194,"filePath":195,"digest":196,"deferredRender":22},{"title":191,"description":192,"permalink":188,"order":75,"icon":193},"Ping Pong","Ping Pong is a simple example that shows how to use the framework.","lucide:ping-pong","# Ping Pong","src/content/docs/examples/ping-pong.mdx","5a2393e4b8593b82"]