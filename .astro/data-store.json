[["Map",1,2,9,10,11,76,88,89],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.2","content-config-digest","a6b66733b5e73880","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"mermaid\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"github-light\",\"dark\":\"catppuccin-frappe\"},\"wrap\":false,\"transformers\":[{\"name\":\"@shikijs/transformers:notation-diff\"},{\"name\":\"@shikijs/transformers:notation-highlight\"},{\"name\":\"@shikijs/transformers:notation-highlight-word\"},{\"name\":\"@shikijs/transformers:notation-focus\"},{\"name\":\"@shikijs/transformers:notation-error-level\"},{\"name\":\"@shikijs/transformers:meta-highlight\"}]},\"remarkPlugins\":[null,null],\"rehypePlugins\":[null,[null,{\"customClassNames\":{\"calloutClass\":\"callout\",\"calloutTitleClass\":\"callout-title\",\"calloutContentClass\":\"callout-content\"}}],null,null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","framework",["Map",11,12,22,23,31,32,40,41,49,50,58,59,67,68],"blog",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"deferredRender":21},{"title":14,"description":15,"permalink":11,"order":16,"icon":17},"Blog","Lorem ipsum dolor sit amet, consectetur adipiscing elit.",6,"lucide:newspaper","import config from '../../../../explainer.config';\n\n# Blog\n\nThe blog section allows you to create and manage your blog posts. It includes features for authoring, publishing, and managing your blog content.\n\n## Create your first article\n\nTo create a new article, you need to create a new markdown file in the `content/blog` directory.\n\nYou should use the frontmatter on top of the file to define the article metadata.\n\n> [!WARNING]\n> The `permalink` property is required. If you modify it, the URL of the article will change.\n\n:::code-group labels=[frontmatter, schema]\n```mdx\n---\ntitle: \"Article title\"\ndescription: \"Article description\"\npermalink: \"article-slug\"\nicon: \"üëã\"\nauthors:\n  - leadcode_dev\nthumbnail: path/to/thumbnail.png\npublishedAt: 2024-01-01:23:00:00\n---\n```\n```ts\nconst schema = z.object({\n  title: z.string(),\n  description: z.string(),\n  permalink: z.string().optional(),\n  icon: z.string().optional(),\n  thumbnail: z.string().optional(),\n  authors: z.array(z.string()).optional(),\n  publishedAt: z.string().optional()\n}),\n```\n:::\n\n### Article visibility\n\nThe article will be visible on the blog page if the `publishedAt` date is defined and is in the future.\n\n> [!NOTE]\n> You can also remove or comment the `publishedAt` date to unpublish the article.\n\nIn the blog index page, the articles are sorted by `publishedAt` date and displayed in descending order.\n\n## Author\n\nThe `authors` property is an array of author names.\n\n\u003Cdiv class=\"mt-4 flex flex-wrap items-center gap-6\">\n  {\n    Object.entries(config.blog.authors).map(([key, author]) => {\n      return (\n        \u003Cdiv\n          data-orientation=\"horizontal\"\n          class=\"relative group/user flex items-center gap-2\"\n        >\n          \u003Cspan class=\"inline-flex items-center justify-center select-none overflow-hidden rounded-full align-middle bg-(--ui-bg-elevated) size-8 text-base shrink-0 transform transition-transform duration-200 group-hover/user:scale-115\">\n            \u003Cimg\n              width=\"32\"\n              height=\"32\"\n              alt={author.name}\n              class=\"h-full w-full rounded-[inherit] object-cover\"\n              src={author.avatar}\n            />\n          \u003C/span>\n          \u003Cdiv class=\"\">\n            \u003Ca\n              href={author.href}\n              tabindex=\"-1\"\n              rel=\"noopener noreferrer\"\n              aria-label={author.name}\n              class=\"focus:outline-none peer\"\n            >\n              \u003Cspan class=\"absolute inset-0\" aria-hidden=\"true\" />\n            \u003C/a>\n            \u003Cp class=\"font-medium text-(--ui-text) peer-hover:text-(--ui-text-highlighted) transition-colors text-sm !p-0\">\n              {author.name}\n            \u003C/p>\n            \u003Cp class=\"text-muted-foreground transition-colors text-xs !p-0\">\n              @{key}\n            \u003C/p>\n          \u003C/div>\n        \u003C/div>\n      );\n    })\n  }\n\u003C/div>\n\n### Add new authors\n\nTo add a new author, you need to add a new author in the `explainer.config.ts` file.\n\n```ts\nexport default defineExplainerConfig({\n  blog: {\n    authors: {\n      leadcode_dev: {\n        name: 'LeadcodeDev',\n        avatar: 'https://avatars.githubusercontent.com/u/8946317?v=4',\n        href: 'https://github.com/LeadcodeDev',\n      },\n      nathaelb: { // [!code ++]\n        name: 'NathaelB', // [!code ++]\n        avatar: 'https://avatars.githubusercontent.com/u/64804778?v=4', // [!code ++]\n        href: 'https://github.com/NathaelB', // [!code ++]\n      }, // [!code ++]\n    }\n  },\n})\n```\n\nThe `authors` property is an object where the key is the author name and the value is an object with the following properties:\n\n- `name` : The author name.\n- `avatar` : The author avatar URL.\n- `href` : The author URL.\n\nYou can then tag your user in the frontmatter of your article.\n\n```mdx\n---\nauthors:\n  - leadcode_dev\n  - nathaelb üëà\n---\n```","src/content/docs/framework/blog.mdx","6496581df5c73440",true,"deploy",{"id":22,"data":24,"body":28,"filePath":29,"digest":30,"deferredRender":21},{"title":25,"description":15,"permalink":26,"order":16,"icon":27},"Deployment","deployment","lucide:cloud-lightning","# Deployment\n\nExplainer uses [`Playwrite`](https://playwright.dev/) to generate diagrams written with [`Mermaid`](https://mermaid-js.github.io/).\n\nYour environment must support installing Playwrite and its browsers in order for Explainer to generate all your pages.\n\n## Cloudflare Pages\n\nExplainer provides a GitHub Actions workflow to deploy your static site to a Cloudflare Pages environment.\n\n> [!NOTE]\n> Cloudflare does not allow the installation of Playwright or its browsers.\n> You must use an external CI/CD pipeline to generate the diagrams and then push them to your Cloudflare Pages environment.\n\n```yaml\nname: Astro CI/CD with Playwright & Cloudflare Pages\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\npermissions:\n  contents: read\n  deployments: write\n\njobs:\n  test-and-deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      NODE_VERSION: 20\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: pnpm/action-setup@v4\n        with:\n          version: 9\n          run_install: false\n      - name: Setup Node.JS\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20.14.0\n\n      - name: üì¶ Install dependencies\n        run: pnpm install\n\n      - name: üé≠ Install Playwright browsers\n        run: pnpm exec playwright install --with-deps\n\n      - name: üõ†Ô∏è Build Astro\n        run: pnpm run build\n\n      - name: üöÄ Deploy to Cloudflare Pages\n        uses: cloudflare/pages-action@v1\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}\n          directory: ./dist\n          gitHubToken: ${{ secrets.GITHUB_TOKEN }}\n\n```","src/content/docs/framework/deploy.mdx","eed26ff1a0ce0adb","configuration",{"id":31,"data":33,"body":37,"filePath":38,"digest":39,"deferredRender":21},{"title":34,"description":15,"permalink":31,"order":35,"icon":36},"Configuration",4,"lucide:settings-2","# Configuration\n\nThe project configuration is simple and centralized in the `explainer.config.ts` file.\n\nThis file uses the `defineExplainerConfig` function to define all the configurations for the site. Here is an overview of the different configuration sections available:\n\n```ts\nexport default defineExplainerConfig({\n  meta: { ... },\n  urls: { ... },\n  docs: { ... },\n  blog: { ... },\n  navbar: [ ... ]\n})\n```\n\n---\n\n## Metadata\n\nThe `meta` section defines the main metadata for the site:\n\n```ts\nmeta: {\n  title: 'Explainer',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n  thumbnail: 'https://placehold.co/1200x630',\n}\n```\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `title` | `string` | Main title of the site, displayed in the browser tabs |\n| `description` | `string` | Short description of the site used in SEO metadata |\n| `thumbnail` | `string` | Default thumbnail URL for social media sharing |\n\n---\n\n## External URLs (urls)\n\nThe `urls` section contains the external links to the project resources:\n\n```ts\nurls: {\n  github: 'https://github.com/LeadcodeDev/explainer',\n}\n```\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `github` | `string` | URL of the project GitHub repository |\n\n---\n\n## Documentation (docs)\n\nThe `docs` section configures the different documentation sections. Each key defines a section with its properties :\n\n```ts\ndocs: {\n  framework: {\n    icon: CuboidIcon,\n    label: 'Framework',\n    href: '/docs/framework/getting-started',\n    baseUrl: '/docs/framework',\n  },\n  syntax: {\n    icon: PencilLineIcon,\n    label: 'Syntax',\n    href: '/docs/syntax/texts',\n    baseUrl: '/docs/syntax',\n  },\n}\n```\n\nFor each documentation section :\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `icon` | `Component` | Lucide icon component for representing the section |\n| `label` | `string` | Displayed name of the section in the interface |\n| `href` | `string` | Complete URL to the main page of the section |\n| `baseUrl` | `string` | Base URL for all pages in this section |\n\n---\n\n## Blog (blog)\n\nThe `blog` section configures the blog settings:\n\n```ts\nblog: {\n  defaults: {\n    thumbnail: 'https://placehold.co/1200x630',\n  },\n  authors: {\n    leadcode_dev: {\n      name: 'LeadcodeDev',\n      avatar: 'https://avatars.githubusercontent.com/u/8946317?v=4',\n      href: 'https://github.com/LeadcodeDev',\n    },\n  }\n}\n```\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `defaults.thumbnail` | `string` | Default thumbnail for articles without specified image |\n| `authors` | `object` | Definition of authors who can publish on the blog |\n\nFor each author (`authors.{id}`):\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | `string` | Full name of the author |\n| `avatar` | `string` | URL of the author's avatar |\n| `href` | `string` | Link to the author's profile |\n\n---\n\n## Navigation bar (navbar)\n\nThe `navbar` section defines the structure of the navigation bar as an array of elements:\n\n```ts\nnavbar: [\n  {\n    label: 'Docs',\n    items: [\n      {\n        label: 'Framework',\n        description: 'Discover Explainer framework guidelines and usages.',\n        href: '/docs/framework/getting-started',\n      },\n      // ...autres items\n    ],\n  },\n  {\n    label: 'API',\n    href: '/api',\n  },\n  // ...autres √©l√©ments de navigation\n]\n```\n\nEach navigation element can have the following properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `label` | `string` | Text displayed in the navigation |\n| `href` | `string` | (Optional) Direct link to a page |\n| `items` | `array` | (Optional) Dropdown submenu |\n\nFor each dropdown item (`items`):\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `label` | `string` | Name of the item |\n| `description` | `string` | Description text of the section |\n| `href` | `string` | Link to the corresponding page |\n\n## Complete example\n\nHere is a complete example of configuration:\n\n```ts\nimport { defineExplainerConfig } from '@/utils'\nimport { CuboidIcon, PencilLineIcon } from 'lucide-react'\n\nexport default defineExplainerConfig({\n  meta: {\n    title: 'My Explainer',\n    description: 'Complete documentation of my project',\n    thumbnail: 'https://my-site.com/thumbnail.png',\n  },\n  urls: {\n    github: 'https://github.com/my-account/my-project',\n  },\n  docs: {\n    guide: {\n      icon: CuboidIcon,\n      label: 'Guide',\n      href: '/docs/guide/introduction',\n      baseUrl: '/docs/guide',\n    },\n    api: {\n      icon: PencilLineIcon,\n      label: 'API',\n      href: '/docs/api/overview',\n      baseUrl: '/docs/api',\n    },\n  },\n  blog: {\n    defaults: {\n      thumbnail: 'https://my-site.com/blog-default.png',\n    },\n    authors: {\n      john_doe: {\n        name: 'John Doe',\n        avatar: 'https://my-site.com/avatars/john.png',\n        href: 'https://github.com/johndoe',\n      },\n    }\n  },\n  navbar: [\n    {\n      label: 'Documentation',\n      items: [\n        {\n          label: 'Guide',\n          description: 'Complete project guide',\n          href: '/docs/guide/introduction',\n        },\n        {\n          label: 'API',\n          description: 'Documentation of the API',\n          href: '/docs/api/overview',\n        },\n      ],\n    },\n    {\n      label: 'Blog',\n      href: '/blog',\n    },\n  ]\n})\n```","src/content/docs/framework/configuration.mdx","fbfd200f54aacd15","docs",{"id":40,"data":42,"body":46,"filePath":47,"digest":48,"deferredRender":21},{"title":43,"description":15,"permalink":40,"order":44,"icon":45},"Documentation",5,"lucide:book","import config from '../../../../explainer.config';\n\n# Documentation\n\nThe documentation section allows you to create and manage your documentation.\n\n> [!important]\n> A collection is a grouping of pages; it can represent a section or a complete documentation.\n\n## Create new collection\n\nTo create a new collection, you need to create a new folder in the `content/docs` folder.\n\nFirst you need to declare a new collection.\n\n#### In the `src/content.config.ts` file\n\n```ts\nconst foo = defineCollection({\n  loader: glob({ pattern: \"**/*.{md,mdx}\", base: \"./src/content/docs/foo\" }),\n  schema: docSchema\n})\n\nexport const collections = { foo };\n```\n\n#### In the `explainer.config.ts` file\n\n```ts\nexport default defineExplainerConfig({\n  docs: {\n    foo: { // [!code ++]\n      icon: 'lucide:cuboid', // [!code ++]\n      label: 'Foo', // [!code ++]\n      href: '/docs/foo/getting-started', // [!code ++]\n      baseUrl: '/docs/foo', // [!code ++]\n    },\n  },\n})\n```\n\n> [!SUCCESS]\n> The `foo` collection is now available in the `docs` section. üöÄ\n\n## Create new page\n\nTo create a new page, you need to create a new file in the `content/docs/foo` directory.\n\nThen you need to add the following frontmatter :\n\n```mdx\n---\ntitle: Page title\ndescription: Page description\npermalink: page-slug\nicon: lucide:book\n---\n\nYour content here...\n```\n\n> [!NOTE]\n> The `icon` property is rendering from [`Iconify`](https://iconify.design) icons.\n\n> [!SUCCESS]\n> Your page is automatically added to the `foo` collection.","src/content/docs/framework/docs.mdx","1cd655b7ffffc199","getting-started",{"id":49,"data":51,"body":55,"filePath":56,"digest":57,"deferredRender":21},{"title":52,"description":15,"permalink":49,"order":53,"icon":54},"Getting Started",1,"lucide:info","# Getting Started üöÄ\n\n## Introduction\n\nExplainer provides a rich set of components that can be used directly in your Markdown files. This documentation outlines the various markdown components available for creating beautiful, interactive documentation.","src/content/docs/framework/getting-started.mdx","5ed21082099e95af","installation",{"id":58,"data":60,"body":64,"filePath":65,"digest":66,"deferredRender":21},{"title":61,"description":15,"permalink":58,"order":62,"icon":63},"Installation",2,"lucide:play","# Installation\n\n\n## Start from scratch\n\nYou can start from scratch by cloning the repository and installing the dependencies.\n\n```bash\ngit clone git@github.com:LeadcodeDev/explainer.git\n```\n\n## Start from a template\n\nYou can start by create new repository from the template.\n\n```bash\nnpx create-astro@latest --template https://github.com/LeadcodeDev/explainer \u003Cproject_name>\n```\n\n---\n\n## Install dependencies\n\nIn your local repository, run the following command to install the dependencies.\n\n:::code-group labels=[pnpm, npm, yarn]\n```bash\npnpm install\n```\n```bash\nnpm install\n```\n```bash\nyarn install\n```\n:::","src/content/docs/framework/installation.mdx","8b289faed9557d2f","project-structure",{"id":67,"data":69,"body":73,"filePath":74,"digest":75,"deferredRender":21},{"title":70,"description":15,"permalink":67,"order":71,"icon":72},"Project Structure",3,"lucide:layout-panel-top","# Project Structure\n\n```\n‚îú‚îÄ‚îÄ public/\n‚îÇ\n‚îú‚îÄ‚îÄ src\n‚îÇ  ‚îú‚îÄ‚îÄ assets/\n‚îÇ  ‚îú‚îÄ‚îÄ content/\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ blog/\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ docs/\n‚îÇ  ‚îÇ    ‚îî‚îÄ‚îÄ [collection]/\n‚îÇ  ‚îÇ\n‚îÇ  ‚îú‚îÄ‚îÄ lib/\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ components/\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ hooks/\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ utils\n‚îÇ  ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ pages/\n‚îÇ\n‚îú‚îÄ‚îÄ explainer.config.ts\n‚îú‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ tsconfig.json\n```\n\nLet's break down the key directories and files in the Explainer project:\n\n## Public folder\nThis directory contains static assets that will be served directly without processing. \nFiles like favicons, robots.txt, and other assets that don't need transformation should be placed here.\n\n--- \n## Content folder\nThe main source directory containing all the application code.\n\nThe `content` folder is divided into two parts:\n- `docs` : Contains the documentation pages\n- `blog` : Contains the blog articles\n\n### Docs Structure\nThe `docs` directory contains all your documentation content organized by collections.\n\n> [!NOTE]\n> Please refer to the dedicated [section](/docs/framework/docs) for more information.\n\n### Blog Structure\nThe `blog` directory contains all your blog articles.\n\n> [!NOTE]\n> Please refer to the dedicated [section](/docs/framework/blog) for more information.","src/content/docs/framework/project-structure.mdx","55af09c5755afc72",["Map",77,78],"welcome",{"id":77,"data":79,"body":85,"filePath":86,"digest":87,"deferredRender":21},{"title":80,"description":81,"permalink":77,"authors":82,"publishedAt":84},"Discover Explainer","Discover Explainer is a tool that helps you create beautiful, responsive, and accessible web documentation using Astro. It's built with Astro, Tailwind CSS, and TypeScript.",[83],"leadcode_dev","2024-01-01:23:00:00","# Welcome to Explainer\n\nExplainer is a documentation boilerplate designed to help you create beautiful, responsive, and accessible web documentation using [Astro](https://astro.build). This project combines the power of Astro with [Tailwind CSS](https://tailwindcss.com) and [TypeScript](https://www.typescriptlang.org) to provide a smooth development experience.\n\n## Why Explainer?\n\nDocumentation is often overlooked, but it's essential for the adoption and effective use of your project.\nExplainer fills an important gap in the technical documentation ecosystem. While Vue has robust solutions like Vitepress, the React ecosystem suffers from a lack of alternatives that don't depend on Next.js. Most documentation frameworks for React are closely tied to Next.js, which can be limiting for many projects.\n\nThis is where Astro, and by extension Explainer, particularly shines. Astro offers remarkable flexibility by allowing you to integrate any technological component related to your business. You can easily incorporate React, Vue, Svelte components, or even standard web elements according to your specific needs.\n\nThis agnostic approach allows you to create documentation that perfectly aligns with your existing technology stack, without forcing you to adopt a particular ecosystem. Whether you work with React, Vue, or other frameworks, Explainer adapts to your needs rather than the other way around.","src/content/blog/welcome.mdx","f5b3166b4e8226c4","syntax",["Map",90,91,98,99,107,108,115,116],"alert",{"id":90,"data":92,"body":95,"filePath":96,"digest":97,"deferredRender":21},{"title":93,"description":15,"permalink":90,"order":71,"icon":94},"Alert","lucide:bell","# Alert\n\nAlerts are UI components that help highlight important information to users. They can be used to provide feedback, warnings, errors, or general notes. \n\nIn Explainer, alerts can be created using a simple Markdown syntax and can be either expanded by default or collapsible. Different types of alerts (`success`, `warning`, `note`, `error`) are available to convey different levels of importance or urgency.\n\n## Success\n\n```\n> [!success]\n> Some content is displayed directly!\n```\n> [!success]\n> Some content is displayed directly!\n\n## Warning\n\n```\n> [!warning] This is a **collapsible** callout\n> Some content shown after opening!\n```\n> [!warning] This is a **collapsible** callout\n> Some content shown after opening!\n\n## Note\n\n```\n> [!note] This is a **collapsible** callout\n> Some content shown after opening!\n```\n> [!note] This is a **collapsible** callout\n> Some content shown after opening!\n\n## Error\n\n```\n> [!error] This is a **collapsible** callout\n> Some content shown after opening!\n```\n> [!error] This is a **collapsible** callout\n> Some content shown after opening!\n\n## Important\n\n```\n> [!important] This is a **collapsible** callout\n> Some content shown after opening!\n```\n> [!important] This is a **collapsible** callout\n> Some content shown after opening!","src/content/docs/syntax/alert.mdx","4d8a4ee9c0b4af07","code-block",{"id":98,"data":100,"body":104,"filePath":105,"digest":106,"deferredRender":21},{"title":101,"description":15,"permalink":102,"order":35,"icon":103},"Code blocks","code-blocks","lucide:code","# Code blocks\n\nCode blocks are a way to display code in a readable format.\nExplainer implements [`Shiki`](https://github.com/shikijs/shiki) for syntax highlighting, you can read the [Shiki documentation](https://shiki.style) for more information on how to customize the syntax highlighting.\n\n## Highlighting\nHighlighting can be done before or after the declaration with the `[!code highlight]` syntax.\n\n### Single line\n\nSingle highlight can be done with the `[!code highlight]` syntax.\n\n```rust\npub struct User {\n  // [!code highlight]\n  pub firstname: String,\n  pub lastname: String,\n}\n```\n\n```rust\npub struct User {\n  pub firstname: String,\n  pub lastname: String, // [!code highlight]\n}\n```\n\n### Multiple lines\n\nMultiple highlights can be done with the `[!code highlight:1,2]` syntax.\n\n```rust {1,3-4}\npub struct User {\n  pub firstname: String,\n  pub lastname: String,\n}\n```\n\n---\n\n## Code block with focused line\n\nThe `[!code focus:\u003Cn>]` syntax will highlight the line 2 of the code block.\n\n```rust\npub struct User {\n    // [!code focus:2]\n  pub firstname: String,\n  pub lastname: String,\n}\n```\n\n---\n\n## Code block with status\n\nThe `[!code error]` and `[!code warning]` syntax will highlight the line with the error or warning status.\n\n### Code block with error\n\nError status can be done with the `[!code error]` syntax.\n\n```rust\npub struct User {\n  pub firstname: String // [!code error]\n  pub lastname: String,\n}\n```\n\n### Code block with warning\n\nWarning status can be done with the `[!code warning]` syntax.\n\n```rust\npub struct User {\n  pub firstname: String, // [!code warning]\n  pub lastname: String,\n}\n```\n\n---\n\n## Line modifiers\n\nThe `[!code --]` and `[!code ++]` syntax will remove or add a line to the code block.\n\n```rust\npub struct User {\n  pub firstname: String,\n  pub lastname: String,\n}\n\nimpl User {\n  pub fn new() -> Self { // [!code --]\n  pub fn new(firstname: String, lastname: String) -> Self { // [!code ++]\n    Self { firstname, lastname }\n  }\n}\n```\n\n---\n\n## Group code blocks\n\nGroup code blocks can be done with the `:::code-group labels=[...labels]` syntax.\n\n> [!warning] This is a **collapsible** callout\n> Only code blocks can be used in a group.\n\n:::code-group labels=[Without labels, With labels]\n```\n:::code-group auto\n// Code block without labels\n:::\n```\n\n```\n:::code-group labels=[first,, third]\n// First code block (named)\n// Second code block\n// Third code block (named)\n:::\n```\n:::\n\n:::code-group labels=[struct, impl]\n```rust\npub struct User {\n  pub firstname: String, // [!code highlight]\n  pub lastname: String,\n}\n```\n\n```rust\npub struct User {\n  pub firstname: String,\n  pub lastname: String,\n}\n\nimpl User {\n  pub fn new(firstname: String, lastname: String) -> Self {\n    Self { firstname, lastname }\n  }\n}\n```\n:::","src/content/docs/syntax/code-block.mdx","2305c1d9504e1e5b","markdown",{"id":107,"data":109,"body":112,"filePath":113,"digest":114,"deferredRender":21},{"title":110,"description":15,"permalink":107,"order":62,"icon":111},"Markdown","lucide:highlighter","# Markdown utilities\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\n\n## Lists\n\nYou can create ordered and unordered lists:\n\n:::code-group labels=[Ordered, Unordered]\n```mdx\n1. First item\n2. Second item\n3. Third item\n```\n```mdx\n- First item\n- Second item\n- Third item\n```\n:::\n\n## Links\n\nYou can create links using the `[text](url)` syntax:\n\n```mdx\n[Google](https://www.google.com)\n```\n\n## Images\n\nYou can add images using the `![alt text](image.png)` syntax:\n\n```mdx\n![Explainer Logo](https://placehold.co/600x400)\n```\n![Explainer Logo](https://placehold.co/600x400)\n\n## Code Blocks\n\nYou can add code blocks using the ``` syntax:\n\n```dart\nprint(\"Hello, World!\")\n```\n\n> [!NOTE]\n> See more about [code blocks](/docs/syntax/code-blocks)\n\n## Tables\n\nYou can create tables using the `|` syntax:\n\n```mdx\n| Header 1 | Header 2 | Header 3 |\n| -------- | -------- | -------- |\n| Cell 1   | Cell 2   | Cell 3   |\n| Cell 4   | Cell 5   | Cell 6   |\n```\n| Header 1 | Header 2 | Header 3 |\n| -------- | -------- | -------- |\n| Cell 1   | Cell 2   | Cell 3   |\n| Cell 4   | Cell 5   | Cell 6   |\n\n## Read More\n\nYou can add a read more link using the `:read-more` syntax:\n\n:::code-group labels=[Base, With title]\n```mdx\ndd\n```\n```mdx\nff\n```\n:::","src/content/docs/syntax/markdown.mdx","a77a7848beaf9835","text",{"id":115,"data":117,"body":121,"filePath":122,"digest":123,"deferredRender":21},{"title":118,"description":15,"permalink":119,"order":53,"icon":120},"Texts","texts","lucide:letter-text","# Texts\n\n## Introduction\n\nExplainer provides a rich set of components that can be used directly in your Markdown files. This documentation outlines the various markdown components available for creating beautiful, interactive documentation.\n\n## Text Formatting\n\nMarkdown supports various text formatting options:\n\n- **Bold text** using `**bold**`\n- *Italic text* using `*italic*`\n- ~~Strikethrough~~ using `~~strikethrough~~`\n- `Inline code` using backticks\n\n## Headers\n\nYou can create headers from level 1 (largest) to level 6 (smallest):\n\n```mdx\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n```","src/content/docs/syntax/text.mdx","5b3719a131f8e73e"]